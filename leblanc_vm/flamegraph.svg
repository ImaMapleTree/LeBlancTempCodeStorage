<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="453.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="453.00"> </text><svg id="frames" x="10" width="1180" total_samples="870"><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.23%)</title><rect x="2.5287%" y="213" width="0.2299%" height="15" fill="rgb(227,127,0)" fg:x="22" fg:w="2"/><text x="2.7787%" y="223.50"></text></g><g><title>&lt;LeBlancVM::leblanc_type::LBValue as core::convert::From&lt;i32&gt;&gt;::from (5 samples, 0.57%)</title><rect x="39.6552%" y="197" width="0.5747%" height="15" fill="rgb(52,167,167)" fg:x="345" fg:w="5"/><text x="39.9052%" y="207.50"></text></g><g><title>LeBlancVM::leblanc_type::LBValue::Int (1 samples, 0.11%)</title><rect x="40.1149%" y="181" width="0.1149%" height="15" fill="rgb(109,219,219)" fg:x="349" fg:w="1"/><text x="40.3649%" y="191.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (6 samples, 0.69%)</title><rect x="40.2299%" y="197" width="0.6897%" height="15" fill="rgb(227,127,0)" fg:x="350" fg:w="6"/><text x="40.4799%" y="207.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (12 samples, 1.38%)</title><rect x="43.7931%" y="181" width="1.3793%" height="15" fill="rgb(227,127,0)" fg:x="381" fg:w="12"/><text x="44.0431%" y="191.50"></text></g><g><title>LeBlancVM::leblanc::unsafe_raw_vec::UnsafeRawVec&lt;T,A&gt;::capacity (1 samples, 0.11%)</title><rect x="46.3218%" y="149" width="0.1149%" height="15" fill="rgb(106,216,216)" fg:x="403" fg:w="1"/><text x="46.5718%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.23%)</title><rect x="46.4368%" y="149" width="0.2299%" height="15" fill="rgb(211,111,0)" fg:x="404" fg:w="2"/><text x="46.6868%" y="159.50"></text></g><g><title>LeBlancVM::lbvm::frame::Frame::push (17 samples, 1.95%)</title><rect x="45.1724%" y="181" width="1.9540%" height="15" fill="rgb(78,190,190)" fg:x="393" fg:w="17"/><text x="45.4224%" y="191.50">L..</text></g><g><title>LeBlancVM::leblanc::unsafe_vec::UnsafeVec&lt;T,A&gt;::push_quick (16 samples, 1.84%)</title><rect x="45.2874%" y="165" width="1.8391%" height="15" fill="rgb(60,174,174)" fg:x="394" fg:w="16"/><text x="45.5374%" y="175.50">L..</text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (4 samples, 0.46%)</title><rect x="46.6667%" y="149" width="0.4598%" height="15" fill="rgb(234,134,0)" fg:x="406" fg:w="4"/><text x="46.9167%" y="159.50"></text></g><g><title>LeBlancVM::lbvm::ivalue::IVal::from_int (1 samples, 0.11%)</title><rect x="47.1264%" y="181" width="0.1149%" height="15" fill="rgb(62,176,176)" fg:x="410" fg:w="1"/><text x="47.3764%" y="191.50"></text></g><g><title>LeBlancVM::lbvm::frame::Frame::execute_method (56 samples, 6.44%)</title><rect x="40.9195%" y="197" width="6.4368%" height="15" fill="rgb(101,212,212)" fg:x="356" fg:w="56"/><text x="41.1695%" y="207.50">LeBlancV..</text></g><g><title>LeBlancVM::lbvm::method::Method::execute_new_frame (1 samples, 0.11%)</title><rect x="47.2414%" y="181" width="0.1149%" height="15" fill="rgb(80,192,192)" fg:x="411" fg:w="1"/><text x="47.4914%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (5 samples, 0.57%)</title><rect x="49.8851%" y="165" width="0.5747%" height="15" fill="rgb(211,111,0)" fg:x="434" fg:w="5"/><text x="50.1351%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (5 samples, 0.57%)</title><rect x="49.8851%" y="149" width="0.5747%" height="15" fill="rgb(245,145,0)" fg:x="434" fg:w="5"/><text x="50.1351%" y="159.50"></text></g><g><title>core::ptr::read (6 samples, 0.69%)</title><rect x="50.4598%" y="165" width="0.6897%" height="15" fill="rgb(234,134,0)" fg:x="439" fg:w="6"/><text x="50.7098%" y="175.50"></text></g><g><title>LeBlancVM::lbvm::frame::Frame::pop (37 samples, 4.25%)</title><rect x="47.3563%" y="197" width="4.2529%" height="15" fill="rgb(95,206,206)" fg:x="412" fg:w="37"/><text x="47.6063%" y="207.50">LeBla..</text></g><g><title>LeBlancVM::leblanc::unsafe_vec::UnsafeVec&lt;T,A&gt;::pop_unsafe (30 samples, 3.45%)</title><rect x="48.1609%" y="181" width="3.4483%" height="15" fill="rgb(88,200,200)" fg:x="419" fg:w="30"/><text x="48.4109%" y="191.50">LeB..</text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (4 samples, 0.46%)</title><rect x="51.1494%" y="165" width="0.4598%" height="15" fill="rgb(234,134,0)" fg:x="445" fg:w="4"/><text x="51.3994%" y="175.50"></text></g><g><title>LeBlancVM::lbvm::frame::Frame::read_instr_u16 (63 samples, 7.24%)</title><rect x="51.6092%" y="197" width="7.2414%" height="15" fill="rgb(106,216,216)" fg:x="449" fg:w="63"/><text x="51.8592%" y="207.50">LeBlancVM:..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (9 samples, 1.03%)</title><rect x="57.8161%" y="181" width="1.0345%" height="15" fill="rgb(219,119,0)" fg:x="503" fg:w="9"/><text x="58.0661%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (7 samples, 0.80%)</title><rect x="58.0460%" y="165" width="0.8046%" height="15" fill="rgb(242,142,0)" fg:x="505" fg:w="7"/><text x="58.2960%" y="175.50"></text></g><g><title>LeBlancVM::lbvm::ivalue::IVal::as_int (7 samples, 0.80%)</title><rect x="58.8506%" y="197" width="0.8046%" height="15" fill="rgb(99,210,210)" fg:x="512" fg:w="7"/><text x="59.1006%" y="207.50"></text></g><g><title>LeBlancVM::lbvm::ivalue::IVal::from_int (5 samples, 0.57%)</title><rect x="59.6552%" y="197" width="0.5747%" height="15" fill="rgb(62,176,176)" fg:x="519" fg:w="5"/><text x="59.9052%" y="207.50"></text></g><g><title>LeBlancVM::leblanc::unsafe_raw_vec::UnsafeRawVec&lt;T,A&gt;::capacity (3 samples, 0.34%)</title><rect x="65.0575%" y="181" width="0.3448%" height="15" fill="rgb(106,216,216)" fg:x="566" fg:w="3"/><text x="65.3075%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3 samples, 0.34%)</title><rect x="65.4023%" y="181" width="0.3448%" height="15" fill="rgb(211,111,0)" fg:x="569" fg:w="3"/><text x="65.6523%" y="191.50"></text></g><g><title>LeBlancVM::leblanc::unsafe_vec::UnsafeVec&lt;T,A&gt;::push_quick (53 samples, 6.09%)</title><rect x="60.2299%" y="197" width="6.0920%" height="15" fill="rgb(60,174,174)" fg:x="524" fg:w="53"/><text x="60.4799%" y="207.50">LeBlancV..</text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (5 samples, 0.57%)</title><rect x="65.7471%" y="181" width="0.5747%" height="15" fill="rgb(234,134,0)" fg:x="572" fg:w="5"/><text x="65.9971%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.23%)</title><rect x="66.7816%" y="181" width="0.2299%" height="15" fill="rgb(251,151,0)" fg:x="581" fg:w="2"/><text x="67.0316%" y="191.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (2 samples, 0.23%)</title><rect x="66.7816%" y="165" width="0.2299%" height="15" fill="rgb(234,134,0)" fg:x="581" fg:w="2"/><text x="67.0316%" y="175.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (2 samples, 0.23%)</title><rect x="66.7816%" y="149" width="0.2299%" height="15" fill="rgb(246,146,0)" fg:x="581" fg:w="2"/><text x="67.0316%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (9 samples, 1.03%)</title><rect x="68.5057%" y="165" width="1.0345%" height="15" fill="rgb(213,113,0)" fg:x="596" fg:w="9"/><text x="68.7557%" y="175.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::guaranteed_eq (3 samples, 0.34%)</title><rect x="69.1954%" y="149" width="0.3448%" height="15" fill="rgb(232,132,0)" fg:x="602" fg:w="3"/><text x="69.4454%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (31 samples, 3.56%)</title><rect x="66.3218%" y="197" width="3.5632%" height="15" fill="rgb(228,128,0)" fg:x="577" fg:w="31"/><text x="66.5718%" y="207.50">allo..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (25 samples, 2.87%)</title><rect x="67.0115%" y="181" width="2.8736%" height="15" fill="rgb(217,117,0)" fg:x="583" fg:w="25"/><text x="67.2615%" y="191.50">co..</text></g><g><title>core::ptr::null_mut (3 samples, 0.34%)</title><rect x="69.5402%" y="165" width="0.3448%" height="15" fill="rgb(204,104,0)" fg:x="605" fg:w="3"/><text x="69.7902%" y="175.50"></text></g><g><title>core::ptr::invalid_mut (2 samples, 0.23%)</title><rect x="69.6552%" y="149" width="0.2299%" height="15" fill="rgb(221,121,0)" fg:x="606" fg:w="2"/><text x="69.9052%" y="159.50"></text></g><g><title>LeBlancVM::lbvm::interpreter::execute_frame_until_end (585 samples, 67.24%)</title><rect x="2.7586%" y="213" width="67.2414%" height="15" fill="rgb(95,206,206)" fg:x="24" fg:w="585"/><text x="3.0086%" y="223.50">LeBlancVM::lbvm::interpreter::execute_frame_until_end</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.11%)</title><rect x="69.8851%" y="197" width="0.1149%" height="15" fill="rgb(219,119,0)" fg:x="608" fg:w="1"/><text x="70.1351%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::clone::Clone&gt;::clone (1 samples, 0.11%)</title><rect x="71.4943%" y="197" width="0.1149%" height="15" fill="rgb(193,93,0)" fg:x="622" fg:w="1"/><text x="71.7443%" y="207.50"></text></g><g><title>LeBlancVM::leblanc::unsafe_vec::UnsafeVec&lt;T,A&gt;::allocator (5 samples, 0.57%)</title><rect x="71.6092%" y="197" width="0.5747%" height="15" fill="rgb(80,192,192)" fg:x="623" fg:w="5"/><text x="71.8592%" y="207.50"></text></g><g><title>LeBlancVM::leblanc::unsafe_raw_vec::UnsafeRawVec&lt;T,A&gt;::allocator (3 samples, 0.34%)</title><rect x="71.8391%" y="181" width="0.3448%" height="15" fill="rgb(67,180,180)" fg:x="625" fg:w="3"/><text x="72.0891%" y="191.50"></text></g><g><title>LeBlancVM::leblanc::unsafe_vec::UnsafeVec&lt;T,A&gt;::set_len (9 samples, 1.03%)</title><rect x="72.1839%" y="197" width="1.0345%" height="15" fill="rgb(61,175,175)" fg:x="628" fg:w="9"/><text x="72.4339%" y="207.50"></text></g><g><title>LeBlancVM::leblanc::unsafe_vec::UnsafeVec&lt;T,A&gt;::capacity (2 samples, 0.23%)</title><rect x="72.9885%" y="181" width="0.2299%" height="15" fill="rgb(88,200,200)" fg:x="635" fg:w="2"/><text x="73.2385%" y="191.50"></text></g><g><title>LeBlancVM::leblanc::unsafe_raw_vec::UnsafeRawVec&lt;T,A&gt;::capacity (1 samples, 0.11%)</title><rect x="73.1034%" y="165" width="0.1149%" height="15" fill="rgb(106,216,216)" fg:x="636" fg:w="1"/><text x="73.3534%" y="175.50"></text></g><g><title>core::alloc::layout::Layout::align (2 samples, 0.23%)</title><rect x="75.1724%" y="149" width="0.2299%" height="15" fill="rgb(234,134,0)" fg:x="654" fg:w="2"/><text x="75.4224%" y="159.50"></text></g><g><title>core::alloc::layout::Layout::size (2 samples, 0.23%)</title><rect x="75.4023%" y="149" width="0.2299%" height="15" fill="rgb(191,91,0)" fg:x="656" fg:w="2"/><text x="75.6523%" y="159.50"></text></g><g><title>_mi_heap_get_free_small_page (3 samples, 0.34%)</title><rect x="77.1264%" y="101" width="0.3448%" height="15" fill="rgb(224,224,67)" fg:x="671" fg:w="3"/><text x="77.3764%" y="111.50"></text></g><g><title>mi_malloc (36 samples, 4.14%)</title><rect x="75.6322%" y="149" width="4.1379%" height="15" fill="rgb(205,205,61)" fg:x="658" fg:w="36"/><text x="75.8822%" y="159.50">mi_ma..</text></g><g><title>mi_heap_malloc (32 samples, 3.68%)</title><rect x="76.0920%" y="133" width="3.6782%" height="15" fill="rgb(211,211,63)" fg:x="662" fg:w="32"/><text x="76.3420%" y="143.50">mi_h..</text></g><g><title>mi_heap_malloc_small (28 samples, 3.22%)</title><rect x="76.5517%" y="117" width="3.2184%" height="15" fill="rgb(175,175,50)" fg:x="666" fg:w="28"/><text x="76.8017%" y="127.50">mi_..</text></g><g><title>_mi_page_malloc (20 samples, 2.30%)</title><rect x="77.4713%" y="101" width="2.2989%" height="15" fill="rgb(187,187,54)" fg:x="674" fg:w="20"/><text x="77.7213%" y="111.50">_..</text></g><g><title>mi_block_next (12 samples, 1.38%)</title><rect x="78.3908%" y="85" width="1.3793%" height="15" fill="rgb(225,225,68)" fg:x="682" fg:w="12"/><text x="78.6408%" y="95.50"></text></g><g><title>mi_block_nextx (12 samples, 1.38%)</title><rect x="78.3908%" y="69" width="1.3793%" height="15" fill="rgb(228,228,69)" fg:x="682" fg:w="12"/><text x="78.6408%" y="79.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (61 samples, 7.01%)</title><rect x="73.9080%" y="165" width="7.0115%" height="15" fill="rgb(78,191,191)" fg:x="643" fg:w="61"/><text x="74.1580%" y="175.50">&lt;mimalloc..</text></g><g><title>mimalloc::may_use_unaligned_api (10 samples, 1.15%)</title><rect x="79.7701%" y="149" width="1.1494%" height="15" fill="rgb(88,199,199)" fg:x="694" fg:w="10"/><text x="80.0201%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (2 samples, 0.23%)</title><rect x="80.6897%" y="133" width="0.2299%" height="15" fill="rgb(227,127,0)" fg:x="702" fg:w="2"/><text x="80.9397%" y="143.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (1 samples, 0.11%)</title><rect x="80.8046%" y="117" width="0.1149%" height="15" fill="rgb(222,122,0)" fg:x="703" fg:w="1"/><text x="81.0546%" y="127.50"></text></g><g><title>__rg_alloc (67 samples, 7.70%)</title><rect x="73.6782%" y="181" width="7.7011%" height="15" fill="rgb(198,198,58)" fg:x="641" fg:w="67"/><text x="73.9282%" y="191.50">__rg_alloc</text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked (4 samples, 0.46%)</title><rect x="80.9195%" y="165" width="0.4598%" height="15" fill="rgb(195,95,0)" fg:x="704" fg:w="4"/><text x="81.1695%" y="175.50"></text></g><g><title>alloc::alloc::alloc (73 samples, 8.39%)</title><rect x="73.2184%" y="197" width="8.3908%" height="15" fill="rgb(228,128,0)" fg:x="637" fg:w="73"/><text x="73.4684%" y="207.50">alloc::alloc..</text></g><g><title>__rust_alloc (2 samples, 0.23%)</title><rect x="81.3793%" y="181" width="0.2299%" height="15" fill="rgb(220,220,66)" fg:x="708" fg:w="2"/><text x="81.6293%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (1 samples, 0.11%)</title><rect x="81.6092%" y="197" width="0.1149%" height="15" fill="rgb(247,147,0)" fg:x="710" fg:w="1"/><text x="81.8592%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.11%)</title><rect x="81.7241%" y="197" width="0.1149%" height="15" fill="rgb(236,136,0)" fg:x="711" fg:w="1"/><text x="81.9741%" y="207.50"></text></g><g><title>core::alloc::layout::Layout::array (26 samples, 2.99%)</title><rect x="81.8391%" y="197" width="2.9885%" height="15" fill="rgb(235,135,0)" fg:x="712" fg:w="26"/><text x="82.0891%" y="207.50">cor..</text></g><g><title>core::alloc::layout::Layout::array::inner (23 samples, 2.64%)</title><rect x="82.1839%" y="181" width="2.6437%" height="15" fill="rgb(195,95,0)" fg:x="715" fg:w="23"/><text x="82.4339%" y="191.50">co..</text></g><g><title>core::alloc::layout::Layout::max_size_for_align (1 samples, 0.11%)</title><rect x="84.7126%" y="165" width="0.1149%" height="15" fill="rgb(239,139,0)" fg:x="737" fg:w="1"/><text x="84.9626%" y="175.50"></text></g><g><title>[LeBlancVM] (1 samples, 0.11%)</title><rect x="85.0575%" y="181" width="0.1149%" height="15" fill="rgb(208,208,62)" fg:x="740" fg:w="1"/><text x="85.3075%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.92%)</title><rect x="84.8276%" y="197" width="0.9195%" height="15" fill="rgb(195,95,0)" fg:x="738" fg:w="8"/><text x="85.0776%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (5 samples, 0.57%)</title><rect x="85.1724%" y="181" width="0.5747%" height="15" fill="rgb(195,195,57)" fg:x="741" fg:w="5"/><text x="85.4224%" y="191.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (1 samples, 0.11%)</title><rect x="85.7471%" y="197" width="0.1149%" height="15" fill="rgb(234,134,0)" fg:x="746" fg:w="1"/><text x="85.9971%" y="207.50"></text></g><g><title>LeBlancVM::leblanc::unsafe_vec::UnsafeVec&lt;T,A&gt;::split_off_as_vec (139 samples, 15.98%)</title><rect x="70.0000%" y="213" width="15.9770%" height="15" fill="rgb(82,195,195)" fg:x="609" fg:w="139"/><text x="70.2500%" y="223.50">LeBlancVM::leblanc::unsaf..</text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.11%)</title><rect x="85.8621%" y="197" width="0.1149%" height="15" fill="rgb(197,97,0)" fg:x="747" fg:w="1"/><text x="86.1121%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.11%)</title><rect x="85.9770%" y="213" width="0.1149%" height="15" fill="rgb(236,136,0)" fg:x="748" fg:w="1"/><text x="86.2270%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.11%)</title><rect x="86.6667%" y="133" width="0.1149%" height="15" fill="rgb(251,151,0)" fg:x="754" fg:w="1"/><text x="86.9167%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (6 samples, 0.69%)</title><rect x="86.6667%" y="149" width="0.6897%" height="15" fill="rgb(225,125,0)" fg:x="754" fg:w="6"/><text x="86.9167%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (5 samples, 0.57%)</title><rect x="86.7816%" y="133" width="0.5747%" height="15" fill="rgb(217,117,0)" fg:x="755" fg:w="5"/><text x="87.0316%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (3 samples, 0.34%)</title><rect x="87.0115%" y="117" width="0.3448%" height="15" fill="rgb(213,113,0)" fg:x="757" fg:w="3"/><text x="87.2615%" y="127.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::guaranteed_eq (2 samples, 0.23%)</title><rect x="87.1264%" y="101" width="0.2299%" height="15" fill="rgb(232,132,0)" fg:x="758" fg:w="2"/><text x="87.3764%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 1.03%)</title><rect x="86.4368%" y="165" width="1.0345%" height="15" fill="rgb(194,94,0)" fg:x="752" fg:w="9"/><text x="86.6868%" y="175.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (1 samples, 0.11%)</title><rect x="87.3563%" y="149" width="0.1149%" height="15" fill="rgb(202,102,0)" fg:x="760" fg:w="1"/><text x="87.6063%" y="159.50"></text></g><g><title>_mi_segment_page_of (13 samples, 1.49%)</title><rect x="91.8391%" y="53" width="1.4943%" height="15" fill="rgb(210,210,62)" fg:x="799" fg:w="13"/><text x="92.0891%" y="63.50"></text></g><g><title>mi_slice_first (9 samples, 1.03%)</title><rect x="92.2989%" y="37" width="1.0345%" height="15" fill="rgb(202,202,60)" fg:x="803" fg:w="9"/><text x="92.5489%" y="47.50"></text></g><g><title>_mi_thread_id (1 samples, 0.11%)</title><rect x="93.3333%" y="53" width="0.1149%" height="15" fill="rgb(214,214,64)" fg:x="812" fg:w="1"/><text x="93.5833%" y="63.50"></text></g><g><title>mi_block_set_next (5 samples, 0.57%)</title><rect x="93.4483%" y="53" width="0.5747%" height="15" fill="rgb(211,211,63)" fg:x="813" fg:w="5"/><text x="93.6983%" y="63.50"></text></g><g><title>mi_block_set_nextx (1 samples, 0.11%)</title><rect x="93.9080%" y="37" width="0.1149%" height="15" fill="rgb(216,216,65)" fg:x="817" fg:w="1"/><text x="94.1580%" y="47.50"></text></g><g><title>mi_check_is_double_free (1 samples, 0.11%)</title><rect x="94.0230%" y="53" width="0.1149%" height="15" fill="rgb(179,179,51)" fg:x="818" fg:w="1"/><text x="94.2730%" y="63.50"></text></g><g><title>mi_checked_ptr_segment (8 samples, 0.92%)</title><rect x="94.1379%" y="53" width="0.9195%" height="15" fill="rgb(184,184,53)" fg:x="819" fg:w="8"/><text x="94.3879%" y="63.50"></text></g><g><title>_mi_ptr_segment (2 samples, 0.23%)</title><rect x="94.8276%" y="37" width="0.2299%" height="15" fill="rgb(179,179,51)" fg:x="825" fg:w="2"/><text x="95.0776%" y="47.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (54 samples, 6.21%)</title><rect x="88.9655%" y="85" width="6.2069%" height="15" fill="rgb(87,199,199)" fg:x="774" fg:w="54"/><text x="89.2155%" y="95.50">&lt;mimallo..</text></g><g><title>mi_free (52 samples, 5.98%)</title><rect x="89.1954%" y="69" width="5.9770%" height="15" fill="rgb(182,182,52)" fg:x="776" fg:w="52"/><text x="89.4454%" y="79.50">mi_free</text></g><g><title>mi_stat_free (1 samples, 0.11%)</title><rect x="95.0575%" y="53" width="0.1149%" height="15" fill="rgb(189,189,55)" fg:x="827" fg:w="1"/><text x="95.3075%" y="63.50"></text></g><g><title>__rg_dealloc (63 samples, 7.24%)</title><rect x="88.3908%" y="101" width="7.2414%" height="15" fill="rgb(191,191,55)" fg:x="769" fg:w="63"/><text x="88.6408%" y="111.50">__rg_deall..</text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked (4 samples, 0.46%)</title><rect x="95.1724%" y="85" width="0.4598%" height="15" fill="rgb(195,95,0)" fg:x="828" fg:w="4"/><text x="95.4224%" y="95.50"></text></g><g><title>core::ptr::alignment::Alignment::new_unchecked (2 samples, 0.23%)</title><rect x="95.4023%" y="69" width="0.2299%" height="15" fill="rgb(251,151,0)" fg:x="830" fg:w="2"/><text x="95.6523%" y="79.50"></text></g><g><title>alloc::alloc::dealloc (65 samples, 7.47%)</title><rect x="88.2759%" y="117" width="7.4713%" height="15" fill="rgb(194,94,0)" fg:x="768" fg:w="65"/><text x="88.5259%" y="127.50">alloc::all..</text></g><g><title>__rust_dealloc (1 samples, 0.11%)</title><rect x="95.6322%" y="101" width="0.1149%" height="15" fill="rgb(178,178,51)" fg:x="832" fg:w="1"/><text x="95.8822%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (66 samples, 7.59%)</title><rect x="88.2759%" y="133" width="7.5862%" height="15" fill="rgb(211,111,0)" fg:x="768" fg:w="66"/><text x="88.5259%" y="143.50">&lt;alloc::al..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (1 samples, 0.11%)</title><rect x="95.7471%" y="117" width="0.1149%" height="15" fill="rgb(246,146,0)" fg:x="833" fg:w="1"/><text x="95.9971%" y="127.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (2 samples, 0.23%)</title><rect x="96.3218%" y="117" width="0.2299%" height="15" fill="rgb(65,179,179)" fg:x="838" fg:w="2"/><text x="96.5718%" y="127.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::convert::From&lt;core::ptr::unique::Unique&lt;T&gt;&gt;&gt;::from (1 samples, 0.11%)</title><rect x="96.4368%" y="101" width="0.1149%" height="15" fill="rgb(214,114,0)" fg:x="839" fg:w="1"/><text x="96.6868%" y="111.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (15 samples, 1.72%)</title><rect x="96.7816%" y="101" width="1.7241%" height="15" fill="rgb(195,95,0)" fg:x="842" fg:w="15"/><text x="97.0316%" y="111.50"></text></g><g><title>core::alloc::layout::Layout::max_size_for_align (2 samples, 0.23%)</title><rect x="98.2759%" y="85" width="0.2299%" height="15" fill="rgb(239,139,0)" fg:x="855" fg:w="2"/><text x="98.5259%" y="95.50"></text></g><g><title>core::alloc::layout::Layout::array (20 samples, 2.30%)</title><rect x="96.5517%" y="117" width="2.2989%" height="15" fill="rgb(235,135,0)" fg:x="840" fg:w="20"/><text x="96.8017%" y="127.50">c..</text></g><g><title>core::ptr::alignment::Alignment::of (3 samples, 0.34%)</title><rect x="98.5057%" y="101" width="0.3448%" height="15" fill="rgb(223,123,0)" fg:x="857" fg:w="3"/><text x="98.7557%" y="111.50"></text></g><g><title>core::ptr::alignment::Alignment::new_unchecked (3 samples, 0.34%)</title><rect x="98.5057%" y="85" width="0.3448%" height="15" fill="rgb(251,151,0)" fg:x="857" fg:w="3"/><text x="98.7557%" y="95.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::cast (1 samples, 0.11%)</title><rect x="98.8506%" y="117" width="0.1149%" height="15" fill="rgb(240,140,0)" fg:x="860" fg:w="1"/><text x="99.1006%" y="127.50"></text></g><g><title>core::mem::drop (114 samples, 13.10%)</title><rect x="86.0920%" y="213" width="13.1034%" height="15" fill="rgb(233,133,0)" fg:x="749" fg:w="114"/><text x="86.3420%" y="223.50">core::mem::drop</text></g><g><title>core::ptr::drop_in_place&lt;LeBlancVM::lbvm::frame::Frame&gt; (114 samples, 13.10%)</title><rect x="86.0920%" y="197" width="13.1034%" height="15" fill="rgb(254,154,0)" fg:x="749" fg:w="114"/><text x="86.3420%" y="207.50">core::ptr::drop_in_p..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;LeBlancVM::lbvm::ivalue::IVal&gt;&gt; (111 samples, 12.76%)</title><rect x="86.4368%" y="181" width="12.7586%" height="15" fill="rgb(203,103,0)" fg:x="752" fg:w="111"/><text x="86.6868%" y="191.50">core::ptr::drop_in_..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;LeBlancVM::lbvm::ivalue::IVal&gt;&gt; (102 samples, 11.72%)</title><rect x="87.4713%" y="165" width="11.7241%" height="15" fill="rgb(225,125,0)" fg:x="761" fg:w="102"/><text x="87.7213%" y="175.50">core::ptr::drop_i..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (100 samples, 11.49%)</title><rect x="87.7011%" y="149" width="11.4943%" height="15" fill="rgb(226,126,0)" fg:x="763" fg:w="100"/><text x="87.9511%" y="159.50">&lt;alloc::raw_vec::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (29 samples, 3.33%)</title><rect x="95.8621%" y="133" width="3.3333%" height="15" fill="rgb(242,142,0)" fg:x="834" fg:w="29"/><text x="96.1121%" y="143.50">all..</text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_unchecked (2 samples, 0.23%)</title><rect x="98.9655%" y="117" width="0.2299%" height="15" fill="rgb(239,139,0)" fg:x="861" fg:w="2"/><text x="99.2155%" y="127.50"></text></g><g><title>[unknown] (865 samples, 99.43%)</title><rect x="0.0000%" y="389" width="99.4253%" height="15" fill="rgb(181,181,52)" fg:x="0" fg:w="865"/><text x="0.2500%" y="399.50">[unknown]</text></g><g><title>LeBlancVM::lbvm::method::Method::execute_new_frame (865 samples, 99.43%)</title><rect x="0.0000%" y="373" width="99.4253%" height="15" fill="rgb(80,192,192)" fg:x="0" fg:w="865"/><text x="0.2500%" y="383.50">LeBlancVM::lbvm::method::Method::execute_new_frame</text></g><g><title>LeBlancVM::lbvm::interpreter::execute_frame_until_end (865 samples, 99.43%)</title><rect x="0.0000%" y="357" width="99.4253%" height="15" fill="rgb(95,206,206)" fg:x="0" fg:w="865"/><text x="0.2500%" y="367.50">LeBlancVM::lbvm::interpreter::execute_frame_until_end</text></g><g><title>LeBlancVM::lbvm::frame::Frame::execute_method (865 samples, 99.43%)</title><rect x="0.0000%" y="341" width="99.4253%" height="15" fill="rgb(101,212,212)" fg:x="0" fg:w="865"/><text x="0.2500%" y="351.50">LeBlancVM::lbvm::frame::Frame::execute_method</text></g><g><title>LeBlancVM::lbvm::method::Method::execute_new_frame (865 samples, 99.43%)</title><rect x="0.0000%" y="325" width="99.4253%" height="15" fill="rgb(80,192,192)" fg:x="0" fg:w="865"/><text x="0.2500%" y="335.50">LeBlancVM::lbvm::method::Method::execute_new_frame</text></g><g><title>LeBlancVM::lbvm::interpreter::execute_frame_until_end (865 samples, 99.43%)</title><rect x="0.0000%" y="309" width="99.4253%" height="15" fill="rgb(95,206,206)" fg:x="0" fg:w="865"/><text x="0.2500%" y="319.50">LeBlancVM::lbvm::interpreter::execute_frame_until_end</text></g><g><title>LeBlancVM::lbvm::frame::Frame::execute_method (865 samples, 99.43%)</title><rect x="0.0000%" y="293" width="99.4253%" height="15" fill="rgb(101,212,212)" fg:x="0" fg:w="865"/><text x="0.2500%" y="303.50">LeBlancVM::lbvm::frame::Frame::execute_method</text></g><g><title>LeBlancVM::lbvm::method::Method::execute_new_frame (865 samples, 99.43%)</title><rect x="0.0000%" y="277" width="99.4253%" height="15" fill="rgb(80,192,192)" fg:x="0" fg:w="865"/><text x="0.2500%" y="287.50">LeBlancVM::lbvm::method::Method::execute_new_frame</text></g><g><title>LeBlancVM::lbvm::interpreter::execute_frame_until_end (865 samples, 99.43%)</title><rect x="0.0000%" y="261" width="99.4253%" height="15" fill="rgb(95,206,206)" fg:x="0" fg:w="865"/><text x="0.2500%" y="271.50">LeBlancVM::lbvm::interpreter::execute_frame_until_end</text></g><g><title>LeBlancVM::lbvm::frame::Frame::execute_method (865 samples, 99.43%)</title><rect x="0.0000%" y="245" width="99.4253%" height="15" fill="rgb(101,212,212)" fg:x="0" fg:w="865"/><text x="0.2500%" y="255.50">LeBlancVM::lbvm::frame::Frame::execute_method</text></g><g><title>LeBlancVM::lbvm::method::Method::execute_new_frame (865 samples, 99.43%)</title><rect x="0.0000%" y="229" width="99.4253%" height="15" fill="rgb(80,192,192)" fg:x="0" fg:w="865"/><text x="0.2500%" y="239.50">LeBlancVM::lbvm::method::Method::execute_new_frame</text></g><g><title>core::slice::&lt;impl [T]&gt;::as_ptr (2 samples, 0.23%)</title><rect x="99.1954%" y="213" width="0.2299%" height="15" fill="rgb(201,101,0)" fg:x="863" fg:w="2"/><text x="99.4454%" y="223.50"></text></g><g><title>mi_block_set_next (1 samples, 0.11%)</title><rect x="99.4253%" y="389" width="0.1149%" height="15" fill="rgb(211,211,63)" fg:x="865" fg:w="1"/><text x="99.6753%" y="399.50"></text></g><g><title>mi_block_set_nextx (1 samples, 0.11%)</title><rect x="99.4253%" y="373" width="0.1149%" height="15" fill="rgb(216,216,65)" fg:x="865" fg:w="1"/><text x="99.6753%" y="383.50"></text></g><g><title>mi_free (1 samples, 0.11%)</title><rect x="99.5402%" y="389" width="0.1149%" height="15" fill="rgb(182,182,52)" fg:x="866" fg:w="1"/><text x="99.7902%" y="399.50"></text></g><g><title>mi_check_padding (1 samples, 0.11%)</title><rect x="99.5402%" y="373" width="0.1149%" height="15" fill="rgb(185,185,53)" fg:x="866" fg:w="1"/><text x="99.7902%" y="383.50"></text></g><g><title>mi_heap_malloc (1 samples, 0.11%)</title><rect x="99.6552%" y="389" width="0.1149%" height="15" fill="rgb(211,211,63)" fg:x="867" fg:w="1"/><text x="99.9052%" y="399.50"></text></g><g><title>mi_heap_malloc_small (1 samples, 0.11%)</title><rect x="99.6552%" y="373" width="0.1149%" height="15" fill="rgb(175,175,50)" fg:x="867" fg:w="1"/><text x="99.9052%" y="383.50"></text></g><g><title>mi_heap_malloc_small (1 samples, 0.11%)</title><rect x="99.7701%" y="389" width="0.1149%" height="15" fill="rgb(175,175,50)" fg:x="868" fg:w="1"/><text x="100.0201%" y="399.50"></text></g><g><title>_mi_heap_get_free_small_page (1 samples, 0.11%)</title><rect x="99.7701%" y="373" width="0.1149%" height="15" fill="rgb(224,224,67)" fg:x="868" fg:w="1"/><text x="100.0201%" y="383.50"></text></g><g><title>all (870 samples, 100%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(218,218,65)" fg:x="0" fg:w="870"/><text x="0.2500%" y="431.50"></text></g><g><title>LeBlancVM (870 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(179,179,51)" fg:x="0" fg:w="870"/><text x="0.2500%" y="415.50">LeBlancVM</text></g><g><title>mi_malloc (1 samples, 0.11%)</title><rect x="99.8851%" y="389" width="0.1149%" height="15" fill="rgb(205,205,61)" fg:x="869" fg:w="1"/><text x="100.1351%" y="399.50"></text></g><g><title>mi_get_default_heap (1 samples, 0.11%)</title><rect x="99.8851%" y="373" width="0.1149%" height="15" fill="rgb(177,177,50)" fg:x="869" fg:w="1"/><text x="100.1351%" y="383.50"></text></g></svg></svg>